{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PratisthaSingh\\\\Desktop\\\\Donation\\\\Frontend\\\\src\\\\components\\\\SyncNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport socketService from '../services/socketService';\nimport './SyncNotification.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyncNotification = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [syncStatus, setSyncStatus] = useState({\n    isOnline: false,\n    lastSync: null,\n    syncInProgress: false\n  });\n  useEffect(() => {\n    // Listen for Excel data changes\n    socketService.onExcelDataChanged(data => {\n      addNotification({\n        id: Date.now(),\n        type: 'excel-update',\n        title: '🔄 Data Synchronized',\n        message: 'Excel changes have been synced to portal',\n        timestamp: new Date(data.timestamp),\n        autoHide: true\n      });\n      setSyncStatus(prev => ({\n        ...prev,\n        lastSync: new Date(data.timestamp),\n        syncInProgress: false\n      }));\n    });\n\n    // Listen for portal data saved events\n    socketService.onPortalDataSaved(data => {\n      addNotification({\n        id: Date.now(),\n        type: 'portal-save',\n        title: '✅ Data Saved',\n        message: 'Your data has been saved successfully',\n        timestamp: new Date(data.timestamp),\n        autoHide: true\n      });\n    });\n\n    // Listen for sync errors\n    socketService.onSyncError(data => {\n      addNotification({\n        id: Date.now(),\n        type: 'error',\n        title: '❌ Sync Error',\n        message: `Failed to sync: ${data.error}`,\n        timestamp: new Date(data.timestamp),\n        autoHide: false\n      });\n    });\n\n    // Check connection status\n    const checkConnectionStatus = () => {\n      const status = socketService.getStatus();\n      setSyncStatus(prev => ({\n        ...prev,\n        isOnline: status.connected\n      }));\n    };\n    const statusInterval = setInterval(checkConnectionStatus, 5000);\n    checkConnectionStatus();\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, []);\n  const addNotification = notification => {\n    // For save notifications, remove any existing save notifications first\n    if (notification.type === 'portal-save' || notification.type === 'excel-update') {\n      setNotifications(prev => prev.filter(n => n.type !== 'portal-save' && n.type !== 'excel-update'));\n    }\n\n    // Add the new notification\n    setNotifications(prev => [notification, ...prev.slice(0, 2)]); // Keep only 3 notifications max\n\n    if (notification.autoHide) {\n      setTimeout(() => {\n        removeNotification(notification.id);\n      }, 5000);\n    }\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  const formatTime = date => {\n    if (!date) return 'Never';\n    return date.toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sync-notification-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-list\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification ${notification.type}`,\n        onClick: () => removeNotification(notification.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-title\",\n            children: notification.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-time\",\n            children: formatTime(notification.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"notification-close\",\n            onClick: e => {\n              e.stopPropagation();\n              removeNotification(notification.id);\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-message\",\n          children: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, notification.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(SyncNotification, \"tvoIure1jNNeFOrRnHFxd6oV3KQ=\");\n_c = SyncNotification;\nexport default SyncNotification;\nvar _c;\n$RefreshReg$(_c, \"SyncNotification\");","map":{"version":3,"names":["React","useState","useEffect","socketService","jsxDEV","_jsxDEV","SyncNotification","_s","notifications","setNotifications","syncStatus","setSyncStatus","isOnline","lastSync","syncInProgress","onExcelDataChanged","data","addNotification","id","Date","now","type","title","message","timestamp","autoHide","prev","onPortalDataSaved","onSyncError","error","checkConnectionStatus","status","getStatus","connected","statusInterval","setInterval","clearInterval","notification","filter","n","slice","setTimeout","removeNotification","formatTime","date","toLocaleTimeString","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/PratisthaSingh/Desktop/Donation/Frontend/src/components/SyncNotification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport socketService from '../services/socketService';\r\nimport './SyncNotification.css';\r\n\r\nconst SyncNotification = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [syncStatus, setSyncStatus] = useState({\r\n    isOnline: false,\r\n    lastSync: null,\r\n    syncInProgress: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Listen for Excel data changes\r\n    socketService.onExcelDataChanged((data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'excel-update',\r\n        title: '🔄 Data Synchronized',\r\n        message: 'Excel changes have been synced to portal',\r\n        timestamp: new Date(data.timestamp),\r\n        autoHide: true\r\n      });\r\n      \r\n      setSyncStatus(prev => ({\r\n        ...prev,\r\n        lastSync: new Date(data.timestamp),\r\n        syncInProgress: false\r\n      }));\r\n    });\r\n\r\n    // Listen for portal data saved events\r\n    socketService.onPortalDataSaved((data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'portal-save',\r\n        title: '✅ Data Saved',\r\n        message: 'Your data has been saved successfully',\r\n        timestamp: new Date(data.timestamp),\r\n        autoHide: true\r\n      });\r\n    });\r\n\r\n    // Listen for sync errors\r\n    socketService.onSyncError((data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'error',\r\n        title: '❌ Sync Error',\r\n        message: `Failed to sync: ${data.error}`,\r\n        timestamp: new Date(data.timestamp),\r\n        autoHide: false\r\n      });\r\n    });\r\n\r\n    // Check connection status\r\n    const checkConnectionStatus = () => {\r\n      const status = socketService.getStatus();\r\n      setSyncStatus(prev => ({\r\n        ...prev,\r\n        isOnline: status.connected\r\n      }));\r\n    };\r\n\r\n    const statusInterval = setInterval(checkConnectionStatus, 5000);\r\n    checkConnectionStatus();\r\n\r\n    return () => {\r\n      clearInterval(statusInterval);\r\n    };\r\n  }, []);\r\n\r\n  const addNotification = (notification) => {\r\n    // For save notifications, remove any existing save notifications first\r\n    if (notification.type === 'portal-save' || notification.type === 'excel-update') {\r\n      setNotifications(prev => prev.filter(n => n.type !== 'portal-save' && n.type !== 'excel-update'));\r\n    }\r\n    \r\n    // Add the new notification\r\n    setNotifications(prev => [notification, ...prev.slice(0, 2)]); // Keep only 3 notifications max\r\n\r\n    if (notification.autoHide) {\r\n      setTimeout(() => {\r\n        removeNotification(notification.id);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(n => n.id !== id));\r\n  };\r\n\r\n\r\n\r\n  const formatTime = (date) => {\r\n    if (!date) return 'Never';\r\n    return date.toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"sync-notification-container\">\r\n      {/* Notifications */}\r\n      <div className=\"notifications-list\">\r\n        {notifications.map(notification => (\r\n          <div \r\n            key={notification.id} \r\n            className={`notification ${notification.type}`}\r\n            onClick={() => removeNotification(notification.id)}\r\n          >\r\n            <div className=\"notification-header\">\r\n              <span className=\"notification-title\">{notification.title}</span>\r\n              <span className=\"notification-time\">\r\n                {formatTime(notification.timestamp)}\r\n              </span>\r\n              <button \r\n                className=\"notification-close\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  removeNotification(notification.id);\r\n                }}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div className=\"notification-message\">{notification.message}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SyncNotification;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}