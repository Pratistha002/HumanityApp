{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PratisthaSingh\\\\Desktop\\\\Donation\\\\Frontend\\\\src\\\\components\\\\SyncNotification.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport socketService from '../services/socketService';\nimport './SyncNotification.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyncNotification = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [syncStatus, setSyncStatus] = useState({\n    isOnline: false,\n    lastSync: null,\n    syncInProgress: false\n  });\n  useEffect(() => {\n    // Listen for Excel data changes\n    socketService.onExcelDataChanged(data => {\n      addNotification({\n        id: Date.now(),\n        type: 'excel-update',\n        title: '📊 Excel Updated',\n        message: `Changes detected in ${data.changedFile}`,\n        details: formatChanges(data.changes),\n        timestamp: new Date(data.timestamp),\n        autoHide: true\n      });\n      setSyncStatus(prev => ({\n        ...prev,\n        lastSync: new Date(data.timestamp),\n        syncInProgress: false\n      }));\n    });\n\n    // Listen for portal data saved events\n    socketService.onPortalDataSaved(data => {\n      addNotification({\n        id: Date.now(),\n        type: 'portal-save',\n        title: '💾 Data Saved',\n        message: `${data.dataType} saved to Excel successfully`,\n        timestamp: new Date(data.timestamp),\n        autoHide: true\n      });\n    });\n\n    // Listen for sync errors\n    socketService.onSyncError(data => {\n      addNotification({\n        id: Date.now(),\n        type: 'error',\n        title: '❌ Sync Error',\n        message: `Failed to sync: ${data.error}`,\n        timestamp: new Date(data.timestamp),\n        autoHide: false\n      });\n    });\n\n    // Check connection status\n    const checkConnectionStatus = () => {\n      const status = socketService.getStatus();\n      setSyncStatus(prev => ({\n        ...prev,\n        isOnline: status.connected\n      }));\n    };\n    const statusInterval = setInterval(checkConnectionStatus, 5000);\n    checkConnectionStatus();\n    return () => {\n      clearInterval(statusInterval);\n    };\n  }, []);\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev.slice(0, 4)]); // Keep only 5 notifications\n\n    if (notification.autoHide) {\n      setTimeout(() => {\n        removeNotification(notification.id);\n      }, 5000);\n    }\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  const formatChanges = changes => {\n    if (!changes) return '';\n    const summary = [];\n    Object.entries(changes).forEach(([category, categoryChanges]) => {\n      const total = categoryChanges.added.length + categoryChanges.modified.length + categoryChanges.deleted.length;\n      if (total > 0) {\n        summary.push(`${category}: ${total} changes`);\n      }\n    });\n    return summary.join(', ');\n  };\n  const formatTime = date => {\n    if (!date) return 'Never';\n    return date.toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sync-notification-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-list\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification ${notification.type}`,\n        onClick: () => removeNotification(notification.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-title\",\n            children: notification.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-time\",\n            children: formatTime(notification.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"notification-close\",\n            onClick: e => {\n              e.stopPropagation();\n              removeNotification(notification.id);\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-message\",\n          children: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), notification.details && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-details\",\n          children: notification.details\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)]\n      }, notification.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(SyncNotification, \"tvoIure1jNNeFOrRnHFxd6oV3KQ=\");\n_c = SyncNotification;\nexport default SyncNotification;\nvar _c;\n$RefreshReg$(_c, \"SyncNotification\");","map":{"version":3,"names":["React","useState","useEffect","socketService","jsxDEV","_jsxDEV","SyncNotification","_s","notifications","setNotifications","syncStatus","setSyncStatus","isOnline","lastSync","syncInProgress","onExcelDataChanged","data","addNotification","id","Date","now","type","title","message","changedFile","details","formatChanges","changes","timestamp","autoHide","prev","onPortalDataSaved","dataType","onSyncError","error","checkConnectionStatus","status","getStatus","connected","statusInterval","setInterval","clearInterval","notification","slice","setTimeout","removeNotification","filter","n","summary","Object","entries","forEach","category","categoryChanges","total","added","length","modified","deleted","push","join","formatTime","date","toLocaleTimeString","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/PratisthaSingh/Desktop/Donation/Frontend/src/components/SyncNotification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport socketService from '../services/socketService';\r\nimport './SyncNotification.css';\r\n\r\nconst SyncNotification = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [syncStatus, setSyncStatus] = useState({\r\n    isOnline: false,\r\n    lastSync: null,\r\n    syncInProgress: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Listen for Excel data changes\r\n    socketService.onExcelDataChanged((data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'excel-update',\r\n        title: '📊 Excel Updated',\r\n        message: `Changes detected in ${data.changedFile}`,\r\n        details: formatChanges(data.changes),\r\n        timestamp: new Date(data.timestamp),\r\n        autoHide: true\r\n      });\r\n      \r\n      setSyncStatus(prev => ({\r\n        ...prev,\r\n        lastSync: new Date(data.timestamp),\r\n        syncInProgress: false\r\n      }));\r\n    });\r\n\r\n    // Listen for portal data saved events\r\n    socketService.onPortalDataSaved((data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'portal-save',\r\n        title: '💾 Data Saved',\r\n        message: `${data.dataType} saved to Excel successfully`,\r\n        timestamp: new Date(data.timestamp),\r\n        autoHide: true\r\n      });\r\n    });\r\n\r\n    // Listen for sync errors\r\n    socketService.onSyncError((data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'error',\r\n        title: '❌ Sync Error',\r\n        message: `Failed to sync: ${data.error}`,\r\n        timestamp: new Date(data.timestamp),\r\n        autoHide: false\r\n      });\r\n    });\r\n\r\n    // Check connection status\r\n    const checkConnectionStatus = () => {\r\n      const status = socketService.getStatus();\r\n      setSyncStatus(prev => ({\r\n        ...prev,\r\n        isOnline: status.connected\r\n      }));\r\n    };\r\n\r\n    const statusInterval = setInterval(checkConnectionStatus, 5000);\r\n    checkConnectionStatus();\r\n\r\n    return () => {\r\n      clearInterval(statusInterval);\r\n    };\r\n  }, []);\r\n\r\n  const addNotification = (notification) => {\r\n    setNotifications(prev => [notification, ...prev.slice(0, 4)]); // Keep only 5 notifications\r\n\r\n    if (notification.autoHide) {\r\n      setTimeout(() => {\r\n        removeNotification(notification.id);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(n => n.id !== id));\r\n  };\r\n\r\n  const formatChanges = (changes) => {\r\n    if (!changes) return '';\r\n    \r\n    const summary = [];\r\n    Object.entries(changes).forEach(([category, categoryChanges]) => {\r\n      const total = categoryChanges.added.length + categoryChanges.modified.length + categoryChanges.deleted.length;\r\n      if (total > 0) {\r\n        summary.push(`${category}: ${total} changes`);\r\n      }\r\n    });\r\n    \r\n    return summary.join(', ');\r\n  };\r\n\r\n  const formatTime = (date) => {\r\n    if (!date) return 'Never';\r\n    return date.toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"sync-notification-container\">\r\n      {/* Notifications */}\r\n      <div className=\"notifications-list\">\r\n        {notifications.map(notification => (\r\n          <div \r\n            key={notification.id} \r\n            className={`notification ${notification.type}`}\r\n            onClick={() => removeNotification(notification.id)}\r\n          >\r\n            <div className=\"notification-header\">\r\n              <span className=\"notification-title\">{notification.title}</span>\r\n              <span className=\"notification-time\">\r\n                {formatTime(notification.timestamp)}\r\n              </span>\r\n              <button \r\n                className=\"notification-close\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  removeNotification(notification.id);\r\n                }}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div className=\"notification-message\">{notification.message}</div>\r\n            {notification.details && (\r\n              <div className=\"notification-details\">{notification.details}</div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SyncNotification;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}