{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.listeners = new Map();\n  }\n  connect() {\n    if (this.socket && this.isConnected) {\n      return this.socket;\n    }\n    const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n    this.socket = io(serverUrl, {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true\n    });\n    this.socket.on('connect', () => {\n      this.isConnected = true;\n      console.log('[SOCKET] Connected to server:', this.socket.id);\n    });\n    this.socket.on('disconnect', reason => {\n      this.isConnected = false;\n      console.log('[SOCKET] Disconnected from server:', reason);\n    });\n    this.socket.on('connect_error', error => {\n      console.error('[SOCKET] Connection error:', error);\n    });\n\n    // Listen for data updates from server\n    this.socket.on('dataUpdated', data => {\n      console.log('[SOCKET] Data update received:', data);\n\n      // Notify all registered listeners\n      this.listeners.forEach((callback, eventName) => {\n        if (eventName === 'dataUpdated') {\n          callback(data);\n        }\n      });\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      console.log('[SOCKET] Manually disconnected');\n    }\n  }\n\n  // Register a listener for data updates\n  onDataUpdate(callback) {\n    this.listeners.set('dataUpdated', callback);\n\n    // Connect if not already connected\n    if (!this.isConnected) {\n      this.connect();\n    }\n  }\n\n  // Remove a listener\n  removeListener(eventName) {\n    this.listeners.delete(eventName);\n  }\n\n  // Check if connected\n  isSocketConnected() {\n    return this.isConnected && this.socket && this.socket.connected;\n  }\n\n  // Get connection status\n  getStatus() {\n    var _this$socket, _this$socket2, _this$socket2$io, _this$socket2$io$engi, _this$socket2$io$engi2;\n    return {\n      connected: this.isConnected,\n      socketId: ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id) || null,\n      transport: ((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : (_this$socket2$io = _this$socket2.io) === null || _this$socket2$io === void 0 ? void 0 : (_this$socket2$io$engi = _this$socket2$io.engine) === null || _this$socket2$io$engi === void 0 ? void 0 : (_this$socket2$io$engi2 = _this$socket2$io$engi.transport) === null || _this$socket2$io$engi2 === void 0 ? void 0 : _this$socket2$io$engi2.name) || null\n    };\n  }\n}\n\n// Create a singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","listeners","Map","connect","serverUrl","process","env","REACT_APP_API_URL","transports","timeout","forceNew","on","console","log","id","reason","error","data","forEach","callback","eventName","disconnect","onDataUpdate","set","removeListener","delete","isSocketConnected","connected","getStatus","_this$socket","_this$socket2","_this$socket2$io","_this$socket2$io$engi","_this$socket2$io$engi2","socketId","transport","engine","name","socketService"],"sources":["C:/Users/PratisthaSingh/Desktop/Donation/Frontend/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.isConnected) {\r\n      return this.socket;\r\n    }\r\n\r\n    const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n    \r\n    this.socket = io(serverUrl, {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 20000,\r\n      forceNew: true\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      this.isConnected = true;\r\n      console.log('[SOCKET] Connected to server:', this.socket.id);\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason) => {\r\n      this.isConnected = false;\r\n      console.log('[SOCKET] Disconnected from server:', reason);\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('[SOCKET] Connection error:', error);\r\n    });\r\n\r\n    // Listen for data updates from server\r\n    this.socket.on('dataUpdated', (data) => {\r\n      console.log('[SOCKET] Data update received:', data);\r\n      \r\n      // Notify all registered listeners\r\n      this.listeners.forEach((callback, eventName) => {\r\n        if (eventName === 'dataUpdated') {\r\n          callback(data);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n      console.log('[SOCKET] Manually disconnected');\r\n    }\r\n  }\r\n\r\n  // Register a listener for data updates\r\n  onDataUpdate(callback) {\r\n    this.listeners.set('dataUpdated', callback);\r\n    \r\n    // Connect if not already connected\r\n    if (!this.isConnected) {\r\n      this.connect();\r\n    }\r\n  }\r\n\r\n  // Remove a listener\r\n  removeListener(eventName) {\r\n    this.listeners.delete(eventName);\r\n  }\r\n\r\n  // Check if connected\r\n  isSocketConnected() {\r\n    return this.isConnected && this.socket && this.socket.connected;\r\n  }\r\n\r\n  // Get connection status\r\n  getStatus() {\r\n    return {\r\n      connected: this.isConnected,\r\n      socketId: this.socket?.id || null,\r\n      transport: this.socket?.io?.engine?.transport?.name || null\r\n    };\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst socketService = new SocketService();\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}